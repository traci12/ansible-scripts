---
- name: Install SuiteCRM on Ubuntu 24 with Nginx
  hosts: webservers
  become: yes
  become_user: root
  vars:
    mysql_root_password: "{{ groups['websiterootpassword'] }}"
    mysql_suitecrm_db: "{{ groups['websitewebhost'] }}"
    mysql_suitecrm_user: "{{ groups['websitedbuser'] }}"
    mysql_suitecrm_password: "{{ groups['websitedbpassword'] }}"
    suitecrm_version: "8.2.2"
    suitecrm_url: "https://suitecrm.com/files/162/SuiteCRM-8-2/659/SuiteCRM-8.2.2.zip"
    web_root: "/var/www/pm1"
  tasks:
    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: yes

    - name: Install required packages
      apt:
        name:
          - nginx
          - mysql-server
          - php-fpm
          - php-mysql
          - php-xml
          - php-mbstring
          - php-curl
          - php-zip
          - unzip
          - curl
        state: present

    - name: Start and enable Nginx
      service:
        name: nginx
        state: started
        enabled: yes

    - name: Start and enable MySQL
      service:
        name: mysql
        state: started
        enabled: yes

    - name: Secure MySQL installation - Set root password
      shell: |
        mysql --user=root --execute="ALTER USER 'root'@'localhost' IDENTIFIED WITH 'mysql_native_password' BY '{{ mysql_root_password }}';"

    - name: Secure MySQL installation - Remove anonymous users
      shell: |
        mysql --user=root --password={{ mysql_root_password }} --execute="DELETE FROM mysql.user WHERE User='';"

    - name: Secure MySQL installation - Disallow root login remotely
      shell: |
        mysql --user=root --password={{ mysql_root_password }} --execute="DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');"

    - name: Secure MySQL installation - Remove test database
      shell: |
        mysql --user=root --password={{ mysql_root_password }} --execute="DROP DATABASE IF EXISTS test; DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';"

    - name: Secure MySQL installation - Reload privilege tables
      shell: |
        mysql --user=root --password={{ mysql_root_password }} --execute="FLUSH PRIVILEGES;"

    - name: Create SuiteCRM database
      mysql_db:
        name: "{{ mysql_suitecrm_db }}"
        state: present

    - name: Create SuiteCRM user
      mysql_user:
        name: "{{ mysql_suitecrm_user }}"
        password: "{{ mysql_suitecrm_password }}"
        priv: "{{ mysql_suitecrm_db }}.*:ALL"
        state: present

    - name: Download SuiteCRM
      get_url:
        url: "{{ suitecrm_url }}"
        dest: /tmp/suitecrm.zip

    - name: Unzip SuiteCRM
      unarchive:
        src: /tmp/suitecrm.zip
        dest: /tmp
        remote_src: yes

    - name: Move SuiteCRM to web root
      shell: mv /tmp/SuiteCRM-{{ suitecrm_version }}/* {{ web_root }}
      args:
        creates: "{{ web_root }}/index.php"

    - name: Set permissions on web root
      file:
        path: "{{ web_root }}"
        state: directory
        owner: www-data
        group: www-data
        mode: '0755'
        recurse: yes

    - name: Configure Nginx for SuiteCRM
      blockinfile:
        path: /etc/nginx/sites-available/suitecrm
        create: yes
        block: |
          server {
              listen 80;
              server_name "{{ domain }}";
              root {{ web_root }};
              index index.php index.html index.htm;

              location / {
                  try_files $uri $uri/ /index.php?$query_string;
              }

              location ~ \.php$ {
                  include snippets/fastcgi-php.conf;
                  fastcgi_pass unix:/var/run/php/php-fpm.sock;
                  fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                  include fastcgi_params;
              }

              location ~ /\.ht {
                  deny all;
              }
          }

    - name: Enable SuiteCRM site
      file:
        src: /etc/nginx/sites-available/suitecrm
        dest: /etc/nginx/sites-enabled/suitecrm
        state: link

    - name: Remove default Nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Test Nginx configuration
      command: nginx -t
      register: nginx_test
      ignore_errors: yes

    - name: Fail if Nginx configuration test fails
      fail:
        msg: "Nginx configuration test failed"
      when: nginx_test.rc != 0

    - name: Reload Nginx
      service:
        name: nginx
        state: reloaded

    - name: Install Composer if not already installed
      shell: curl -sS https://getcomposer.org/installer | php
      args:
        chdir: /usr/local/bin
      when: ansible_stat.stat.exists == False
      register: composer_installed
      changed_when: composer_installed.stdout.find('Composer') != -1

    - name: Check if composer.phar exists
      stat:
        path: /usr/local/bin/composer.phar
      register: ansible_stat

    - name: Run Composer install
      shell: php composer.phar install --no-dev
      args:
        chdir: "{{ web_root }}"
      environment:
        COMPOSER_ALLOW_SUPERUSER: "1"
        COMPOSER_HOME: "/root/.composer"
